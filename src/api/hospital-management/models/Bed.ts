/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management Api
 * Hospital Management System for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: student@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BedStatus } from './BedStatus';
import {
    BedStatusFromJSON,
    BedStatusFromJSONTyped,
    BedStatusToJSON,
} from './BedStatus';

/**
 * 
 * @export
 * @interface Bed
 */
export interface Bed {
    /**
     * Bed unique identifier
     * @type {string}
     * @memberof Bed
     */
    id?: string;
    /**
     * ID of department where bed is located
     * @type {string}
     * @memberof Bed
     */
    departmentId: string;
    /**
     * Type of bed
     * @type {string}
     * @memberof Bed
     */
    bedType: BedBedTypeEnum;
    /**
     * Quality rating of bed (0-1)
     * @type {number}
     * @memberof Bed
     */
    bedQuality: number;
    /**
     * 
     * @type {BedStatus}
     * @memberof Bed
     */
    status: BedStatus;
    /**
     * Date and time when bed was created
     * @type {Date}
     * @memberof Bed
     */
    createdAt?: Date;
    /**
     * Date and time when bed was last updated
     * @type {Date}
     * @memberof Bed
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const BedBedTypeEnum = {
    Standard: 'standard',
    Intensive: 'intensive',
    Isolation: 'isolation',
    Recovery: 'recovery'
} as const;
export type BedBedTypeEnum = typeof BedBedTypeEnum[keyof typeof BedBedTypeEnum];


/**
 * Check if a given object implements the Bed interface.
 */
export function instanceOfBed(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "departmentId" in value;
    isInstance = isInstance && "bedType" in value;
    isInstance = isInstance && "bedQuality" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function BedFromJSON(json: any): Bed {
    return BedFromJSONTyped(json, false);
}

export function BedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Bed {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'departmentId': json['department_id'],
        'bedType': json['bed_type'],
        'bedQuality': json['bed_quality'],
        'status': BedStatusFromJSON(json['status']),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function BedToJSON(value?: Bed | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'department_id': value.departmentId,
        'bed_type': value.bedType,
        'bed_quality': value.bedQuality,
        'status': BedStatusToJSON(value.status),
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

