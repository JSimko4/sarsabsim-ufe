/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management Api
 * Hospital Management System for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: student@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HospitalizationRecord } from './HospitalizationRecord';
import {
    HospitalizationRecordFromJSON,
    HospitalizationRecordFromJSONTyped,
    HospitalizationRecordToJSON,
} from './HospitalizationRecord';

/**
 *
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * Patient unique identifier
     * @type {string}
     * @memberof Patient
     */
    id?: string;
    /**
     * Patient first name
     * @type {string}
     * @memberof Patient
     */
    firstName: string;
    /**
     * Patient last name
     * @type {string}
     * @memberof Patient
     */
    lastName: string;
    /**
     * Patient birth date
     * @type {Date}
     * @memberof Patient
     */
    birthDate: Date;
    /**
     * Patient age
     * @type {number}
     * @memberof Patient
     */
    age: number;
    /**
     * Patient gender
     * @type {string}
     * @memberof Patient
     */
    gender: PatientGenderEnum;
    /**
     * Patient phone number
     * @type {string}
     * @memberof Patient
     */
    phone?: string;
    /**
     * Patient email address
     * @type {string}
     * @memberof Patient
     */
    email?: string;
    /**
     * Patient hospitalization history
     * @type {Array<HospitalizationRecord>}
     * @memberof Patient
     */
    hospitalizationRecords: Array<HospitalizationRecord>;
    /**
     * Date and time when patient was registered
     * @type {Date}
     * @memberof Patient
     */
    createdAt?: Date;
    /**
     * Date and time when patient was last updated
     * @type {Date}
     * @memberof Patient
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const PatientGenderEnum = {
    M: 'M',
    F: 'F'
} as const;
export type PatientGenderEnum = typeof PatientGenderEnum[keyof typeof PatientGenderEnum];


/**
 * Check if a given object implements the Patient interface.
 */
export function instanceOfPatient(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "birthDate" in value;
    isInstance = isInstance && "age" in value;
    isInstance = isInstance && "gender" in value;
    isInstance = isInstance && "hospitalizationRecords" in value;

    return isInstance;
}

export function PatientFromJSON(json: any): Patient {
    return PatientFromJSONTyped(json, false);
}

export function PatientFromJSONTyped(json: any, ignoreDiscriminator: boolean): Patient {
    if ((json === undefined) || (json === null)) {
        return json;
    }

    // Calculate age from birth_date if not provided
    const calculateAge = (birthDate: string): number => {
        const birth = new Date(birthDate);
        const today = new Date();
        let age = today.getFullYear() - birth.getFullYear();
        const monthDiff = today.getMonth() - birth.getMonth();
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        return age;
    };

    const birthDate = json['birth_date'];
    const age = json['age'] !== undefined ? json['age'] : calculateAge(birthDate);

    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'birthDate': (new Date(birthDate)),
        'age': age,
        'gender': json['gender'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'hospitalizationRecords': !exists(json, 'hospitalization_records') || json['hospitalization_records'] === null ? [] : ((json['hospitalization_records'] as Array<any>).map(HospitalizationRecordFromJSON)),
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function PatientToJSON(value?: Patient | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'birth_date': value.birthDate ? (value.birthDate.toISOString().substr(0,10)) : undefined,
        'gender': value.gender,
        'phone': value.phone,
        'email': value.email,
        'hospitalization_records': value.hospitalizationRecords ? ((value.hospitalizationRecords as Array<any>).map(HospitalizationRecordToJSON)) : [],
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

