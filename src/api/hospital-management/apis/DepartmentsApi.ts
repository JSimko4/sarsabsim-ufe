/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management Api
 * Hospital Management System for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: student@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Department,
} from '../models';
import {
    DepartmentFromJSON,
    DepartmentToJSON,
} from '../models';

export interface CreateDepartmentRequest {
    department: Department;
}

export interface DeleteDepartmentRequest {
    departmentId: string;
}

export interface GetDepartmentRequest {
    departmentId: string;
}

export interface UpdateDepartmentRequest {
    departmentId: string;
    department: Department;
}

/**
 * DepartmentsApi - interface
 *
 * @export
 * @interface DepartmentsApiInterface
 */
export interface DepartmentsApiInterface {
    /**
     * Use this method to create a new department
     * @summary Creates new department
     * @param {Department} department Department to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiInterface
     */
    createDepartmentRaw(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>>;

    /**
     * Use this method to create a new department
     * Creates new department
     */
    createDepartment(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department>;

    /**
     * Use this method to delete specific department
     * @summary Deletes specific department
     * @param {string} departmentId Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiInterface
     */
    deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete specific department
     * Deletes specific department
     */
    deleteDepartment(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get details of particular department
     * @summary Provides details about specific department
     * @param {string} departmentId Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiInterface
     */
    getDepartmentRaw(requestParameters: GetDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>>;

    /**
     * Get details of particular department
     * Provides details about specific department
     */
    getDepartment(requestParameters: GetDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department>;

    /**
     * Get list of all hospital departments
     * @summary Provides the list of all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiInterface
     */
    getDepartmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Department>>>;

    /**
     * Get list of all hospital departments
     * Provides the list of all departments
     */
    getDepartments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Department>>;

    /**
     * Use this method to update department details
     * @summary Updates specific department
     * @param {string} departmentId Department ID
     * @param {Department} department Department data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiInterface
     */
    updateDepartmentRaw(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>>;

    /**
     * Use this method to update department details
     * Updates specific department
     */
    updateDepartment(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department>;

}

/**
 *
 */
export class DepartmentsApi extends runtime.BaseAPI implements DepartmentsApiInterface {

    /**
     * Use this method to create a new department
     * Creates new department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepartmentToJSON(requestParameters.department),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepartmentFromJSON(jsonValue));
    }

    /**
     * Use this method to create a new department
     * Creates new department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department> {
        const response = await this.createDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete specific department
     * Deletes specific department
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.departmentId === null || requestParameters.departmentId === undefined) {
            throw new runtime.RequiredError('departmentId','Required parameter requestParameters.departmentId was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{departmentId}`.replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters.departmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete specific department
     * Deletes specific department
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDepartmentRaw(requestParameters, initOverrides);
    }

    /**
     * Get details of particular department
     * Provides details about specific department
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>> {
        if (requestParameters.departmentId === null || requestParameters.departmentId === undefined) {
            throw new runtime.RequiredError('departmentId','Required parameter requestParameters.departmentId was null or undefined when calling getDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{departmentId}`.replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters.departmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepartmentFromJSON(jsonValue));
    }

    /**
     * Get details of particular department
     * Provides details about specific department
     */
    async getDepartment(requestParameters: GetDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department> {
        const response = await this.getDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of all hospital departments
     * Provides the list of all departments
     */
    async getDepartmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Department>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepartmentFromJSON));
    }

    /**
     * Get list of all hospital departments
     * Provides the list of all departments
     */
    async getDepartments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Department>> {
        const response = await this.getDepartmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Use this method to update department details
     * Updates specific department
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Department>> {
        if (requestParameters.departmentId === null || requestParameters.departmentId === undefined) {
            throw new runtime.RequiredError('departmentId','Required parameter requestParameters.departmentId was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments/{departmentId}`.replace(`{${"departmentId"}}`, encodeURIComponent(String(requestParameters.departmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DepartmentToJSON(requestParameters.department),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepartmentFromJSON(jsonValue));
    }

    /**
     * Use this method to update department details
     * Updates specific department
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Department> {
        const response = await this.updateDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
