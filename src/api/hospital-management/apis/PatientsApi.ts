/* tslint:disable */
/* eslint-disable */
/**
 * Hospital Management Api
 * Hospital Management System for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: student@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Patient,
} from '../models';
import {
    PatientFromJSON,
    PatientToJSON,
} from '../models';

export interface CreatePatientRequest {
    patient: Patient;
}

export interface DeletePatientRequest {
    patientId: string;
}

export interface GetPatientRequest {
    patientId: string;
}

export interface UpdatePatientRequest {
    patientId: string;
    patient: Patient;
}

/**
 * PatientsApi - interface
 * 
 * @export
 * @interface PatientsApiInterface
 */
export interface PatientsApiInterface {
    /**
     * Use this method to create a new patient
     * @summary Creates new patient
     * @param {Patient} patient Patient to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApiInterface
     */
    createPatientRaw(requestParameters: CreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>>;

    /**
     * Use this method to create a new patient
     * Creates new patient
     */
    createPatient(requestParameters: CreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient>;

    /**
     * Use this method to delete specific patient
     * @summary Deletes specific patient
     * @param {string} patientId Patient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApiInterface
     */
    deletePatientRaw(requestParameters: DeletePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete specific patient
     * Deletes specific patient
     */
    deletePatient(requestParameters: DeletePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get details of particular patient
     * @summary Provides details about specific patient
     * @param {string} patientId Patient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApiInterface
     */
    getPatientRaw(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>>;

    /**
     * Get details of particular patient
     * Provides details about specific patient
     */
    getPatient(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient>;

    /**
     * Get list of all patients
     * @summary Provides the list of all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApiInterface
     */
    getPatientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Patient>>>;

    /**
     * Get list of all patients
     * Provides the list of all patients
     */
    getPatients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Patient>>;

    /**
     * Use this method to update patient details
     * @summary Updates specific patient
     * @param {string} patientId Patient ID
     * @param {Patient} patient Patient data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApiInterface
     */
    updatePatientRaw(requestParameters: UpdatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>>;

    /**
     * Use this method to update patient details
     * Updates specific patient
     */
    updatePatient(requestParameters: UpdatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient>;

}

/**
 * 
 */
export class PatientsApi extends runtime.BaseAPI implements PatientsApiInterface {

    /**
     * Use this method to create a new patient
     * Creates new patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatientToJSON(requestParameters.patient),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Use this method to create a new patient
     * Creates new patient
     */
    async createPatient(requestParameters: CreatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient> {
        const response = await this.createPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete specific patient
     * Deletes specific patient
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling deletePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{patientId}`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete specific patient
     * Deletes specific patient
     */
    async deletePatient(requestParameters: DeletePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePatientRaw(requestParameters, initOverrides);
    }

    /**
     * Get details of particular patient
     * Provides details about specific patient
     */
    async getPatientRaw(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling getPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{patientId}`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Get details of particular patient
     * Provides details about specific patient
     */
    async getPatient(requestParameters: GetPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient> {
        const response = await this.getPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of all patients
     * Provides the list of all patients
     */
    async getPatientsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Patient>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PatientFromJSON));
    }

    /**
     * Get list of all patients
     * Provides the list of all patients
     */
    async getPatients(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Patient>> {
        const response = await this.getPatientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Use this method to update patient details
     * Updates specific patient
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{patientId}`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PatientToJSON(requestParameters.patient),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Use this method to update patient details
     * Updates specific patient
     */
    async updatePatient(requestParameters: UpdatePatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Patient> {
        const response = await this.updatePatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
