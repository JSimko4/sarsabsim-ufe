/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface Cv1simkoAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface Cv1simkoAmbulanceWlEditor {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
    }
    interface Cv1simkoAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
}
export interface Cv1simkoAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCv1simkoAmbulanceWlEditorElement;
}
export interface Cv1simkoAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCv1simkoAmbulanceWlListElement;
}
declare global {
    interface HTMLCv1simkoAmbulanceWlAppElement extends Components.Cv1simkoAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLCv1simkoAmbulanceWlAppElement: {
        prototype: HTMLCv1simkoAmbulanceWlAppElement;
        new (): HTMLCv1simkoAmbulanceWlAppElement;
    };
    interface HTMLCv1simkoAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLCv1simkoAmbulanceWlEditorElement extends Components.Cv1simkoAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCv1simkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLCv1simkoAmbulanceWlEditorElement, ev: Cv1simkoAmbulanceWlEditorCustomEvent<HTMLCv1simkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCv1simkoAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLCv1simkoAmbulanceWlEditorElement, ev: Cv1simkoAmbulanceWlEditorCustomEvent<HTMLCv1simkoAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCv1simkoAmbulanceWlEditorElement: {
        prototype: HTMLCv1simkoAmbulanceWlEditorElement;
        new (): HTMLCv1simkoAmbulanceWlEditorElement;
    };
    interface HTMLCv1simkoAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLCv1simkoAmbulanceWlListElement extends Components.Cv1simkoAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCv1simkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLCv1simkoAmbulanceWlListElement, ev: Cv1simkoAmbulanceWlListCustomEvent<HTMLCv1simkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCv1simkoAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLCv1simkoAmbulanceWlListElement, ev: Cv1simkoAmbulanceWlListCustomEvent<HTMLCv1simkoAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCv1simkoAmbulanceWlListElement: {
        prototype: HTMLCv1simkoAmbulanceWlListElement;
        new (): HTMLCv1simkoAmbulanceWlListElement;
    };
    interface HTMLElementTagNameMap {
        "cv1simko-ambulance-wl-app": HTMLCv1simkoAmbulanceWlAppElement;
        "cv1simko-ambulance-wl-editor": HTMLCv1simkoAmbulanceWlEditorElement;
        "cv1simko-ambulance-wl-list": HTMLCv1simkoAmbulanceWlListElement;
    }
}
declare namespace LocalJSX {
    interface Cv1simkoAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface Cv1simkoAmbulanceWlEditor {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: Cv1simkoAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface Cv1simkoAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: Cv1simkoAmbulanceWlListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "cv1simko-ambulance-wl-app": Cv1simkoAmbulanceWlApp;
        "cv1simko-ambulance-wl-editor": Cv1simkoAmbulanceWlEditor;
        "cv1simko-ambulance-wl-list": Cv1simkoAmbulanceWlList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cv1simko-ambulance-wl-app": LocalJSX.Cv1simkoAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLCv1simkoAmbulanceWlAppElement>;
            "cv1simko-ambulance-wl-editor": LocalJSX.Cv1simkoAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLCv1simkoAmbulanceWlEditorElement>;
            "cv1simko-ambulance-wl-list": LocalJSX.Cv1simkoAmbulanceWlList & JSXBase.HTMLAttributes<HTMLCv1simkoAmbulanceWlListElement>;
        }
    }
}
